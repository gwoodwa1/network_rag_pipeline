{"pandoc-api-version":[1,23,1],"meta":{"author":{"t":"MetaInlines","c":[{"t":"Str","c":"Engineering"},{"t":"Space"},{"t":"Str","c":"Team"}]},"category":{"t":"MetaInlines","c":[{"t":"Str","c":"architecture"}]},"date":{"t":"MetaInlines","c":[{"t":"Str","c":"2024-01-15"}]},"description":{"t":"MetaInlines","c":[{"t":"Str","c":"Overall"},{"t":"Space"},{"t":"Str","c":"system"},{"t":"Space"},{"t":"Str","c":"architecture"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"core"},{"t":"Space"},{"t":"Str","c":"components"}]},"id":{"t":"MetaInlines","c":[{"t":"Str","c":"system-architecture"}]},"title":{"t":"MetaInlines","c":[{"t":"Str","c":"System"},{"t":"Space"},{"t":"Str","c":"Architecture"},{"t":"Space"},{"t":"Str","c":"Design"}]}},"blocks":[{"t":"RawBlock","c":["json","{\n  \"@context\": {\n    \"@vocab\": \"https://schema.org/\",\n    \"sections\": {\n      \"@container\": \"@list\"\n    }\n  },\n  \"@graph\": [\n    {\n      \"@context\": {\n        \"@vocab\": \"https://schema.org/\",\n        \"sections\": {\n          \"@container\": \"@list\"\n        }\n      },\n      \"@type\": \"Document\",\n      \"@id\": \"system-architecture\",\n      \"filename\": \"unknown\",\n      \"title\": \"System Architecture Design\",\n      \"description\": \"Overall system architecture and core components\",\n      \"dateCreated\": \"2024-01-15\",\n      \"author\": \"Engineering Team\",\n      \"sections\": [\n        {\n          \"@type\": \"Section\",\n          \"@id\": \"unknown-sec-2-system-architecture-design\",\n          \"title\": \"System Architecture Design\",\n          \"level\": 1,\n          \"content\": \"This document outlines the high-level architecture of our distributed system.\"\n        },\n        {\n          \"@type\": \"Section\",\n          \"@id\": \"unknown-sec-3-overview\",\n          \"title\": \"Overview\",\n          \"level\": 2,\n          \"content\": \"Our system follows a microservices architecture pattern with clear separation of concerns. The architecture is designed for scalability, maintainability, and fault tolerance.\\n\\nKey principles: - Microservices architecture - Event-driven communication - API-first design - Cloud-native deployment\"\n        },\n        {\n          \"@type\": \"Section\",\n          \"@id\": \"unknown-sec-4-core-components\",\n          \"title\": \"Core Components\",\n          \"level\": 2,\n          \"content\": \"### API Gateway\\n\\nThe API Gateway serves as the single entry point for all client requests. It handles: - Request routing and load balancing - Authentication and authorization - Rate limiting and throttling - Request/response transformation\\n\\n```yaml\\napiGateway:\\n  port: 8080\\n  timeout: 30s\\n  rateLimit: 1000/min\\n  auth:\\n    type: JWT\\n    secret: ${JWT_SECRET}\\n```\\n\\n### User Service\\n\\nManages user accounts, profiles, and authentication: - User registration and login - Profile management - Password reset functionality - Social authentication integration\\n\\n### Data Service\\n\\nHandles all data operations: - CRUD operations for business entities - Data validation and transformation - Caching layer integration - Database connection pooling\"\n        },\n        {\n          \"@type\": \"Section\",\n          \"@id\": \"unknown-sec-5-database-schema\",\n          \"title\": \"Database Schema\",\n          \"level\": 2,\n          \"content\": \"TablePurposeKey FieldsusersUser accountsid, email, password_hashprofilesUser profilesuser_id, name, avatar_urlsessionsActive sessionsid, user_id, expires_at\"\n        },\n        {\n          \"@type\": \"Section\",\n          \"@id\": \"unknown-sec-6-deployment-architecture\",\n          \"title\": \"Deployment Architecture\",\n          \"level\": 2,\n          \"content\": \"The system is deployed using Docker containers orchestrated by Kubernetes:\\n\\n```dockerfile\\nFROM node:16-alpine\\nWORKDIR /app\\nCOPY package*.json ./\\nRUN npm ci --only=production\\nCOPY . .\\nEXPOSE 3000\\nCMD [\\\"npm\\\", \\\"start\\\"]\\n```\"\n        }\n      ]\n    }\n  ]\n}"]}]}
